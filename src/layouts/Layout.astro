<!DOCTYPE html>
<html lang="pl">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>{Astro.props.title}</title>
    <meta name="description" content={Astro.props.description}>

    <!-- Google Tag Manager -->
<script>(function(w,d,s,l,i){w[l]=w[l]||[];w[l].push({'gtm.start':
new Date().getTime(),event:'gtm.js'});var f=d.getElementsByTagName(s)[0],
j=d.createElement(s),dl=l!='dataLayer'?'&l='+l:'';j.async=true;j.src=
'https://www.googletagmanager.com/gtm.js?id='+i+dl;f.parentNode.insertBefore(j,f);
})(window,document,'script','dataLayer','GTM-KRXHQB6Z');</script>
<!-- End Google Tag Manager -->

    <link rel="preconnect" href="https://fonts.googleapis.com">
    <link rel="preconnect" href="https://fonts.gstatic.com" crossorigin>
    <link href="https://fonts.googleapis.com/css2?family=Inter:wght@400;500;700;800&display=swap" rel="stylesheet">
    <style>
        body { font-family: 'Inter', sans-serif; }
        #mobile-menu { transition: transform 0.3s ease-in-out; }
        .nav-category { padding: 8px 12px; font-size: 0.8rem; font-weight: 700; color: #475569; text-transform: uppercase; letter-spacing: 0.05em; border-bottom: 1px solid #e2e8f0; }
        .ad-placeholder { display: flex; align-items: center; justify-content: center; background-color: #e2e8f0; border-radius: 0.5rem; color: #64748b; font-size: 0.875rem; min-height: 90px; border: 2px dashed #cbd5e1; }
    </style>

<script async src="https://pagead2.googlesyndication.com/pagead/js/adsbygoogle.js?client=ca-pub-8204584521214475"
     crossorigin="anonymous"></script>

</head>

<body class="bg-slate-50 text-slate-800">

<!-- Google Tag Manager (noscript) -->
<noscript><iframe src="https://www.googletagmanager.com/ns.html?id=GTM-KRXHQB6Z"
height="0" width="0" style="display:none;visibility:hidden"></iframe></noscript>
<!-- End Google Tag Manager (noscript) -->

    <div class="min-h-screen flex flex-col">
        <header class="bg-white shadow-sm sticky top-0 z-20">
            <div class="container mx-auto px-4">
                <div class="flex justify-between items-center py-4">
                    <a href="/" class="text-2xl font-extrabold text-slate-900 tracking-tight">Licz.<span class="text-indigo-600">me</span></a>
                    <!-- ZMIANA: Dodano aria-label dla dostępności -->
                    <button id="menu-btn" class="p-2 rounded-md focus:outline-none focus:ring-2 focus:ring-indigo-500" aria-label="Otwórz menu">
                        <svg class="w-6 h-6" fill="none" stroke="currentColor" viewBox="0 0 24 24" xmlns="http://www.w3.org/2000/svg"><path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M4 6h16M4 12h16m-7 6h7"></path></svg>
                    </button>
                </div>
            </div>
        </header>
        <div id="mobile-menu" class="fixed top-0 left-0 w-72 h-full bg-white shadow-lg z-30 transform -translate-x-full overflow-y-auto">
            <div class="p-4"><h2 class="text-lg font-bold mb-2 text-slate-700">Wszystkie kalkulatory</h2></div>
            <nav id="main-nav" class="flex flex-col"></nav>
        </div>
        <div id="menu-overlay" class="fixed inset-0 bg-black bg-opacity-50 z-20 hidden"></div>
        <main class="flex-grow container mx-auto p-4 md:p-8">
            <slot />
        </main>
        <footer class="bg-white mt-12">
            <div class="container mx-auto px-4 py-6 text-center text-slate-500">
                <p>&copy; <span id="footer-year"></span> Licz.me - Wszelkie prawa zastrzeżone.</p>
                <p class="text-sm mt-1">Pamiętaj, że wszystkie kalkulatory mają charakter szacunkowy i nie zastąpią profesjonalnej porady.</p>
            </div>
        </footer>
    </div>
    
    <script>
        document.addEventListener('DOMContentLoaded', function() {
    
            const calculatorConfig = [
                // Konfiguracja nawigacji
                {
                    category: 'Finanse i Podatki',
                    items: [
                        { url: '/kalkulator-brutto-netto', name: 'Brutto-Netto (UoP)' },
                        { url: '/kalkulator-umowa-zlecenie', name: 'Umowa Zlecenie' },
                        { url: '/kalkulator-kredytu-hipotecznego', name: 'Kredyt Hipoteczny' },
                        { url: '/kalkulator-zdolnosci-kredytowej', name: 'Zdolność Kredytowa' },
                        { url: '/kalkulator-lokat', name: 'Lokaty Bankowe' },
                        { url: '/kalkulator-procentu-skladanego', name: 'Procent Składany' },
                        { url: '/kalkulator-inflacji', name: 'Inflacja' },
                        { url: '/kalkulator-vat', name: 'VAT' },
                        { url: '/kalkulator-walut', name: 'Walutowy' }
                    ]
                },
                {
                    category: 'Zdrowie i Styl Życia',
                    items: [
                        { url: '/kalkulator-bmi', name: 'BMI' },
                        { url: '/kalkulator-cpm', name: 'Zapotrzebowanie Kaloryczne' },
                        { url: '/kalkulator-terminu-porodu', name: 'Termin Porodu' },
                        { url: '/kalkulator-promili', name: 'Promile' }
                    ]
                },
                {
                    category: 'Sport i Fitness',
                    items: [
                        { url: '/kalkulator-1rm', name: '1RM (Maks. Ciężar)' },
                        { url: '/kalkulator-tempa-biegu', name: 'Tempo Biegu' }
                    ]
                },
                {
                    category: 'Dom i Codzienność',
                    items: [
                        { url: '/kalkulator-spalania-paliwa', name: 'Spalanie Paliwa' },
                        { url: '/kalkulator-dat', name: 'Różnica Dat' },
                        { url: '/kalkulator-kuchenny', name: 'Kuchenny' }
                    ]
                }
            ];

            // --- NAWIGACJA ---
            const mainNav = document.getElementById('main-nav');
            if (mainNav) {
                const homeLink = document.createElement('a');
                homeLink.href = '/';
                homeLink.textContent = 'Strona Główna';
                homeLink.className = 'nav-link block py-2 px-4 text-slate-700 hover:bg-slate-100 font-bold';
                mainNav.appendChild(homeLink);

                calculatorConfig.forEach(category => {
                    const categoryDiv = document.createElement('div');
                    categoryDiv.className = 'nav-category';
                    categoryDiv.textContent = category.category;
                    mainNav.appendChild(categoryDiv);
                    
                    category.items.forEach(calc => {
                        const link = document.createElement('a');
                        link.href = calc.url;
                        link.textContent = calc.name;
                        link.className = 'nav-link block py-2 px-4 text-slate-700 hover:bg-slate-100';
                        mainNav.appendChild(link);
                    });
                });
            }

            const menuBtn = document.getElementById('menu-btn');
            const mobileMenu = document.getElementById('mobile-menu');
            const menuOverlay = document.getElementById('menu-overlay');

            if (menuBtn && mobileMenu && menuOverlay) {
                const openMobileMenu = () => { mobileMenu.classList.remove('-translate-x-full'); menuOverlay.classList.remove('hidden'); };
                const closeMobileMenu = () => { mobileMenu.classList.add('-translate-x-full'); menuOverlay.classList.add('hidden'); };
                menuBtn.addEventListener('click', openMobileMenu);
                menuOverlay.addEventListener('click', closeMobileMenu);
            }

            // --- LOGIKA KALKULATORÓW ---
            function handleForm(formId, callback) {
                const form = document.getElementById(formId);
                if (form) {
                    form.addEventListener('submit', (e) => {
                        e.preventDefault();
                        callback();
                    });
                }
            }

            // Ulepszony Kalkulator Brutto-Netto
            const bnForm = document.getElementById('kalkulator-brutto-netto-form');
            if (bnForm) {
                const kwotaInput = document.getElementById('bn-kwota');
                const wynikDiv = document.getElementById('bn-wynik');
                const wynikText = document.getElementById('bn-wynik-tekst');
                const trybSelect = document.getElementById('bn-tryb');
                bnForm.addEventListener('submit', (e) => {
                    e.preventDefault();
                    const kwota = parseFloat(kwotaInput.value);
                    const tryb = trybSelect.value;
                    if (isNaN(kwota) || kwota <= 0) return;
                    let wynik = 0, opis = '';
                    if (tryb === 'brutto-netto') {
                        const s_emerytalna = kwota * 0.0976, s_rentowa = kwota * 0.015, s_chorobowa = kwota * 0.0245;
                        const zus = s_emerytalna + s_rentowa + s_chorobowa;
                        const podstawa_zdrowotna = kwota - zus;
                        const s_zdrowotna = podstawa_zdrowotna * 0.09;
                        const podstawa_opodatkowania = Math.round(podstawa_zdrowotna - 250);
                        const zaliczka_pit = (podstawa_opodatkowania * 0.12) - 300;
                        wynik = kwota - zus - s_zdrowotna - Math.max(0, zaliczka_pit);
                        opis = `Twoje wynagrodzenie netto wynosi: <strong>${wynik.toFixed(2)} PLN</strong>`;
                    } else {
                        let bruttoGuess = kwota * 1.4;
                        for (let i = 0; i < 30; i++) {
                            const s_emerytalna = bruttoGuess * 0.0976, s_rentowa = bruttoGuess * 0.015, s_chorobowa = bruttoGuess * 0.0245;
                            const zus = s_emerytalna + s_rentowa + s_chorobowa;
                            const podstawa_zdrowotna = bruttoGuess - zus;
                            const s_zdrowotna = podstawa_zdrowotna * 0.09;
                            const podstawa_opodatkowania = Math.round(podstawa_zdrowotna - 250);
                            const zaliczka_pit = (podstawa_opodatkowania * 0.12) - 300;
                            const nettoCalculated = bruttoGuess - zus - s_zdrowotna - Math.max(0, zaliczka_pit);
                            if (Math.abs(nettoCalculated - kwota) < 0.01) break;
                            bruttoGuess = bruttoGuess * (kwota / nettoCalculated);
                        }
                        wynik = bruttoGuess;
                        opis = `Szacunkowe wynagrodzenie brutto wynosi: <strong>${wynik.toFixed(2)} PLN</strong>`;
                    }
                    wynikText.innerHTML = opis;
                    wynikDiv.classList.remove('hidden');
                });
            }

            // Kalkulator Umowa Zlecenie
            handleForm('kalkulator-umowa-zlecenie-form', () => {
                const brutto = parseFloat(document.getElementById('zlecenie-kwota').value);
                const status = document.getElementById('zlecenie-status').value;
                const chorobowe = document.getElementById('zlecenie-chorobowe').checked;
                if (isNaN(brutto) || brutto <= 0) return;
                let netto = brutto;
                if (status !== 'student') {
                    const kosztyUzyskania = brutto * 0.2;
                    const s_emerytalna = brutto * 0.0976;
                    const s_rentowa = brutto * 0.015;
                    const s_chorobowa = chorobowe ? brutto * 0.0245 : 0;
                    const zus = s_emerytalna + s_rentowa + s_chorobowa;
                    const podstawa_zdrowotna = brutto - zus;
                    const s_zdrowotna = podstawa_zdrowotna * 0.09;
                    const podstawa_opodatkowania = Math.round(brutto - kosztyUzyskania - zus);
                    const zaliczka_pit = podstawa_opodatkowania * 0.12;
                    netto = brutto - zus - s_zdrowotna - zaliczka_pit;
                }
                document.getElementById('zlecenie-wynik-kwota').textContent = netto.toFixed(2) + ' PLN';
                document.getElementById('zlecenie-wynik').classList.remove('hidden');
            });

            // Kalkulator Kredytu Hipotecznego
            handleForm('kalkulator-kredytu-hipotecznego-form', () => {
                const kwota = parseFloat(document.getElementById('kredyt-kwota').value);
                const lata = parseFloat(document.getElementById('kredyt-okres').value);
                const procent = parseFloat(document.getElementById('kredyt-oprocentowanie').value);
                if (isNaN(kwota) || isNaN(lata) || isNaN(procent) || kwota <= 0 || lata <= 0 || procent <= 0) return;
                const r = (procent / 100) / 12;
                const n = lata * 12;
                const rata = kwota * (r * Math.pow(1 + r, n)) / (Math.pow(1 + r, n) - 1);
                document.getElementById('kredyt-wynik-rata').textContent = rata.toFixed(2) + ' PLN';
                document.getElementById('kredyt-wynik-calkowita').textContent = (rata * n).toFixed(2) + ' PLN';
                document.getElementById('kredyt-wynik').classList.remove('hidden');
            });

            // Kalkulator Lokat
            handleForm('kalkulator-lokat-form', () => {
                const kwota = parseFloat(document.getElementById('lokata-kwota').value);
                const miesiace = parseInt(document.getElementById('lokata-okres').value);
                const procent = parseFloat(document.getElementById('lokata-oprocentowanie').value);
                if (isNaN(kwota) || isNaN(miesiace) || isNaN(procent)) return;
                const zyskBrutto = kwota * (procent / 100) * (miesiace / 12);
                const podatek = zyskBrutto * 0.19;
                const zyskNetto = zyskBrutto - podatek;
                document.getElementById('lokata-wynik-zysk').textContent = zyskNetto.toFixed(2) + ' PLN';
                document.getElementById('lokata-wynik').classList.remove('hidden');
            });

            // Kalkulator VAT
            handleForm('kalkulator-vat-form', () => {
                const kwota = parseFloat(document.getElementById('vat-kwota').value);
                const typ = document.getElementById('vat-typ').value;
                const stawka = parseFloat(document.getElementById('vat-stawka').value) / 100;
                if (isNaN(kwota)) return;
                let netto, brutto, vat;
                if (typ === 'brutto') {
                    brutto = kwota;
                    netto = kwota / (1 + stawka);
                    vat = brutto - netto;
                } else {
                    netto = kwota;
                    vat = netto * stawka;
                    brutto = netto + vat;
                }
                document.getElementById('vat-wynik-netto').textContent = netto.toFixed(2);
                document.getElementById('vat-wynik-vat').textContent = vat.toFixed(2);
                document.getElementById('vat-wynik-brutto').textContent = brutto.toFixed(2);
                document.getElementById('vat-wynik').classList.remove('hidden');
            });

            // Kalkulator Walut
            const currencyForm = document.getElementById('kalkulator-walut-form');
            if (currencyForm) {
                let currencyData = null;
                const loadingEl = document.getElementById('waluty-ladowanie'), errorEl = document.getElementById('waluty-error');
                const selectZ = document.getElementById('waluty-z'), selectNa = document.getElementById('waluty-na');
                
                async function initCurrencyCalculator() {
                    if (currencyData) return;
                    loadingEl.classList.remove('hidden'); errorEl.classList.add('hidden');
                    try {
                        const response = await fetch('https://api.exchangerate-api.com/v4/latest/PLN');
                        if (!response.ok) throw new Error('Network response was not ok.');
                        currencyData = await response.json();
                        const { rates } = currencyData;
                        const popularne = ['PLN', 'EUR', 'USD', 'GBP', 'CHF', 'CZK', 'UAH'];
                        const filteredRates = Object.keys(rates).filter(w => popularne.includes(w));
                        selectZ.innerHTML = ''; selectNa.innerHTML = '';
                        filteredRates.forEach(w => {
                            selectZ.innerHTML += `<option value="${w}">${w}</option>`;
                            selectNa.innerHTML += `<option value="${w}">${w}</option>`;
                        });
                        selectZ.value = 'EUR'; selectNa.value = 'PLN';
                        loadingEl.classList.add('hidden');
                    } catch (error) {
                        console.error("Błąd pobierania danych walutowych:", error);
                        loadingEl.classList.add('hidden'); errorEl.classList.remove('hidden');
                    }
                }
                
                currencyForm.addEventListener('submit', (e) => {
                    e.preventDefault();
                    if (!currencyData) return;
                    const kwota = parseFloat(document.getElementById('waluty-kwota').value);
                    const z = selectZ.value, na = selectNa.value;
                    if (isNaN(kwota)) return;
                    const wynik = (kwota / currencyData.rates[z]) * currencyData.rates[na];
                    document.getElementById('waluty-wynik-tekst').textContent = `${kwota.toFixed(2)} ${z} = ${wynik.toFixed(2)} ${na}`;
                    document.getElementById('waluty-wynik').classList.remove('hidden');
                });

                initCurrencyCalculator();
            }

            // Kalkulator BMI
            handleForm('kalkulator-bmi-form', () => {
                const waga = parseFloat(document.getElementById('bmi-waga').value);
                const wzrost = parseFloat(document.getElementById('bmi-wzrost').value);
                if (isNaN(waga) || isNaN(wzrost) || waga <= 0 || wzrost <= 0) return;
                const bmi = waga / Math.pow(wzrost / 100, 2);
                let interpretacja, colorClass;
                if (bmi < 18.5) { interpretacja = 'Niedowaga'; colorClass = 'text-blue-600'; }
                else if (bmi < 25) { interpretacja = 'Waga prawidłowa'; colorClass = 'text-green-600'; }
                else if (bmi < 30) { interpretacja = 'Nadwaga'; colorClass = 'text-orange-500'; }
                else { interpretacja = 'Otyłość'; colorClass = 'text-red-600'; }
                document.getElementById('bmi-wynik-wartosc').textContent = bmi.toFixed(2);
                const interpretacjaEl = document.getElementById('bmi-wynik-interpretacja');
                interpretacjaEl.textContent = interpretacja;
                interpretacjaEl.className = `text-lg font-medium mt-2 ${colorClass}`;
                document.getElementById('bmi-wynik').classList.remove('hidden');
            });

            // Kalkulator CPM/BMR
            handleForm('kalkulator-cpm-form', () => {
                const plec = document.getElementById('cpm-plec').value;
                const waga = parseFloat(document.getElementById('cpm-waga').value);
                const wzrost = parseFloat(document.getElementById('cpm-wzrost').value);
                const wiek = parseInt(document.getElementById('cpm-wiek').value);
                const aktywnosc = parseFloat(document.getElementById('cpm-aktywnosc').value);
                if (isNaN(waga) || isNaN(wzrost) || isNaN(wiek) || isNaN(aktywnosc)) return;
                let bmr;
                if (plec === 'mezczyzna') { bmr = 88.362 + (13.397 * waga) + (4.799 * wzrost) - (5.677 * wiek); }
                else { bmr = 447.593 + (9.247 * waga) + (3.098 * wzrost) - (4.330 * wiek); }
                const cpm = bmr * aktywnosc;
                document.getElementById('cpm-wynik-bmr').textContent = bmr.toFixed(0) + ' kcal';
                document.getElementById('cpm-wynik-cpm').textContent = cpm.toFixed(0) + ' kcal';
                document.getElementById('cpm-wynik').classList.remove('hidden');
            });
            
            // Kalkulator Terminu Porodu
            handleForm('kalkulator-terminu-porodu-form', () => {
                const dataStr = document.getElementById('porod-data').value;
                if (!dataStr) return;
                const data = new Date(dataStr);
                data.setDate(data.getDate() + 7);
                data.setMonth(data.getMonth() - 3);
                data.setFullYear(data.getFullYear() + 1);
                document.getElementById('porod-wynik-data').textContent = data.toLocaleDateString('pl-PL', { year: 'numeric', month: 'long', day: 'numeric' });
                document.getElementById('porod-wynik').classList.remove('hidden');
            });

            // Kalkulator 1RM
            handleForm('kalkulator-1rm-form', () => {
                const ciezar = parseFloat(document.getElementById('rm-ciezar').value);
                const powtorzenia = parseInt(document.getElementById('rm-powtorzenia').value);
                if (isNaN(ciezar) || isNaN(powtorzenia) || ciezar <= 0 || powtorzenia <= 0) return;
                const rm = ciezar * (1 + (powtorzenia / 30));
                document.getElementById('rm-wynik-wartosc').textContent = rm.toFixed(1) + ' kg';
                document.getElementById('rm-wynik').classList.remove('hidden');
            });
            
            // Kalkulator Tempa Biegu
            handleForm('kalkulator-tempa-biegu-form', () => {
                const dystans = parseFloat(document.getElementById('bieg-dystans').value);
                const h = parseInt(document.getElementById('bieg-godziny').value) || 0;
                const m = parseInt(document.getElementById('bieg-minuty').value) || 0;
                const s = parseInt(document.getElementById('bieg-sekundy').value) || 0;
                const tempoM = parseInt(document.getElementById('bieg-tempo-min').value) || 0;
                const tempoS = parseInt(document.getElementById('bieg-tempo-sek').value) || 0;
                const czasWSek = h * 3600 + m * 60 + s;
                const tempoWSek = tempoM * 60 + tempoS;
                let wynik = '';
                if (!isNaN(dystans) && czasWSek > 0) {
                    const tempoNaKm = czasWSek / dystans;
                    const tempoMinuty = Math.floor(tempoNaKm / 60);
                    const tempoSekundy = Math.round(tempoNaKm % 60);
                    wynik = `Twoje tempo to: ${tempoMinuty}'${tempoSekundy.toString().padStart(2, '0')}"/km`;
                } else if (!isNaN(dystans) && tempoWSek > 0) {
                    const calkowityCzas = dystans * tempoWSek;
                    const czasGodziny = Math.floor(calkowityCzas / 3600);
                    const czasMinuty = Math.floor((calkowityCzas % 3600) / 60);
                    const czasSekundy = Math.round(calkowityCzas % 60);
                    wynik = `Pokonasz dystans w: ${czasGodziny}h ${czasMinuty}m ${czasSekundy}s`;
                } else if (czasWSek > 0 && tempoWSek > 0) {
                    const obliczonyDystans = czasWSek / tempoWSek;
                    wynik = `Przebiegniesz: ${obliczonyDystans.toFixed(2)} km`;
                } else {
                    wynik = "Wypełnij dwa z trzech pól.";
                }
                document.getElementById('bieg-wynik-tekst').textContent = wynik;
                document.getElementById('bieg-wynik').classList.remove('hidden');
            });

            // Kalkulator Spalania Paliwa
            handleForm('kalkulator-spalania-paliwa-form', () => {
                const dystans = parseFloat(document.getElementById('paliwo-dystans').value);
                const spalone = parseFloat(document.getElementById('paliwo-spalone').value);
                const cena = parseFloat(document.getElementById('paliwo-cena').value);
                if (isNaN(dystans) || isNaN(spalone) || dystans <= 0 || spalone <= 0) return;
                const spalanie = (spalone / dystans) * 100;
                document.getElementById('paliwo-wynik-spalanie').textContent = spalanie.toFixed(2) + ' l/100km';
                if (!isNaN(cena) && cena > 0) {
                    const koszt = spalanie * cena;
                    document.getElementById('paliwo-wynik-koszt').textContent = koszt.toFixed(2) + ' PLN';
                } else {
                    document.getElementById('paliwo-wynik-koszt').textContent = '-';
                }
                document.getElementById('paliwo-wynik').classList.remove('hidden');
            });
            
            // Kalkulator Dat
            const dateForm = document.getElementById('kalkulator-dat-form');
            if (dateForm) {
                document.getElementById('daty-koniec').value = new Date().toISOString().split('T')[0];
                dateForm.addEventListener('submit', (e) => {
                    e.preventDefault();
                    const start = document.getElementById('daty-start').value;
                    const koniec = document.getElementById('daty-koniec').value;
                    if (!start || !koniec) return;
                    const startDate = new Date(start);
                    const endDate = new Date(koniec);
                    const diffTime = Math.abs(endDate - startDate);
                    const diffDays = Math.ceil(diffTime / (1000 * 60 * 60 * 24));
                    document.getElementById('daty-wynik-tekst').textContent = `${diffDays} dni`;
                    document.getElementById('daty-wynik').classList.remove('hidden');
                });
            }
            
            // Kalkulator Zdolności Kredytowej
            handleForm('kalkulator-zdolnosci-kredytowej-form', () => {
                const dochod = parseFloat(document.getElementById('zk-dochod').value) || 0;
                const wydatki = parseFloat(document.getElementById('zk-wydatki').value) || 0;
                const raty = parseFloat(document.getElementById('zk-raty').value) || 0;
                const osoby = parseInt(document.getElementById('zk-osoby').value) || 1;
                
                const minimumSocjalneNaOsobe = 1200; // Uproszczone założenie
                const dostepneSrodki = dochod - wydatki - raty - (osoby * minimumSocjalneNaOsobe);

                if (dostepneSrodki <= 0) {
                    document.getElementById('zk-wynik-zdolnosc').textContent = "Brak zdolności kredytowej";
                    document.getElementById('zk-wynik').classList.remove('hidden');
                    return;
                }
                
                const maxRata = dostepneSrodki * 0.5;
                const okres = 300;
                const oprocentowanie = 0.08 / 12;
                const zdolnosc = maxRata * ( (Math.pow(1 + oprocentowanie, okres) - 1) / (oprocentowanie * Math.pow(1 + oprocentowanie, okres)) );

                document.getElementById('zk-wynik-zdolnosc').textContent = `~ ${Math.round(zdolnosc / 1000) * 1000} PLN`;
                document.getElementById('zk-wynik').classList.remove('hidden');
            });

            // Kalkulator Procentu Składanego
            handleForm('kalkulator-procentu-skladanego-form', () => {
                const wklad = parseFloat(document.getElementById('ps-wklad').value) || 0;
                const doplata = parseFloat(document.getElementById('ps-doplata').value) || 0;
                const lata = parseInt(document.getElementById('ps-lata').value) || 0;
                const procent = parseFloat(document.getElementById('ps-procent').value) || 0;
                
                const r = procent / 100;
                const n = 12;
                const t = lata;
                
                let kwota = wklad * Math.pow(1 + r/n, n*t);
                if (doplata > 0) {
                     kwota += doplata * ( (Math.pow(1 + r/n, n*t) - 1) / (r/n) );
                }
                
                const wplacono = wklad + (doplata * 12 * lata);
                const zysk = kwota - wplacono;

                document.getElementById('ps-wynik-kwota').textContent = kwota.toFixed(2) + ' PLN';
                document.getElementById('ps-wynik-wplacono').textContent = wplacono.toFixed(2) + ' PLN';
                document.getElementById('ps-wynik-zysk').textContent = zysk.toFixed(2) + ' PLN';
                document.getElementById('ps-wynik').classList.remove('hidden');
            });

            // Kalkulator Inflacji
            handleForm('kalkulator-inflacji-form', () => {
                const kwota = parseFloat(document.getElementById('inf-kwota').value) || 0;
                const lata = parseInt(document.getElementById('inf-lata').value) || 0;
                const inflacja = parseFloat(document.getElementById('inf-stopa').value) || 0;

                const stopa = inflacja / 100;
                const przyszlaWartosc = kwota / Math.pow(1 + stopa, lata);

                document.getElementById('inf-wynik-tekst').innerHTML = `Za ${lata} lat, dzisiejsze <strong>${kwota.toFixed(2)} PLN</strong> będzie warte tyle, co dzisiaj <strong>${przyszlaWartosc.toFixed(2)} PLN</strong>.`;
                document.getElementById('inf-wynik').classList.remove('hidden');
            });

            // Kalkulator Promili
            handleForm('kalkulator-promili-form', () => {
                const plec = document.getElementById('prom-plec').value;
                const waga = parseFloat(document.getElementById('prom-waga').value) || 0;
                const ilosc = parseFloat(document.getElementById('prom-ilosc').value) || 0;
                const procent = parseFloat(document.getElementById('prom-procent').value) || 0;
                const czas = parseFloat(document.getElementById('prom-czas').value) || 0;

                if (waga <= 0) return;

                const K = (plec === 'mezczyzna') ? 0.7 : 0.6;
                const A = ilosc * (procent / 100) * 0.79;
                
                let promile = A / (K * waga);
                
                promile -= czas * 0.15;

                const wynik = Math.max(0, promile);

                document.getElementById('prom-wynik-wartosc').textContent = wynik.toFixed(2) + ' ‰';
                document.getElementById('prom-wynik').classList.remove('hidden');
            });

            // Kalkulator Kuchenny
            handleForm('kalkulator-kuchenny-form', () => {
                const ilosc = parseFloat(document.getElementById('kuch-ilosc').value) || 0;
                const jednostka = document.getElementById('kuch-jednostka').value;
                
                const przeliczniki = {
                    maka_szklanka_g: 150,
                    cukier_szklanka_g: 220,
                    olej_szklanka_ml: 220,
                    woda_szklanka_ml: 250,
                    lyzka_ml: 15,
                    lyzeczka_ml: 5,
                };

                let wynikText = '';
                switch(jednostka) {
                    case 'maka_szklanka':
                        wynikText = `${ilosc} szkl. mąki ≈ ${ilosc * przeliczniki.maka_szklanka_g} g`;
                        break;
                    case 'cukier_szklanka':
                        wynikText = `${ilosc} szkl. cukru ≈ ${ilosc * przeliczniki.cukier_szklanka_g} g`;
                        break;
                    case 'olej_szklanka':
                        wynikText = `${ilosc} szkl. oleju ≈ ${ilosc * przeliczniki.olej_szklanka_ml} ml`;
                        break;
                    case 'woda_szklanka':
                        wynikText = `${ilosc} szkl. wody ≈ ${ilosc * przeliczniki.woda_szklanka_ml} ml`;
                        break;
                    case 'lyzka':
                        wynikText = `${ilosc} łyżek ≈ ${ilosc * przeliczniki.lyzka_ml} ml`;
                        break;
                    case 'lyzeczka':
                        wynikText = `${ilosc} łyżeczek ≈ ${ilosc * przeliczniki.lyzeczka_ml} ml`;
                        break;
                }

                document.getElementById('kuch-wynik-tekst').textContent = wynikText;
                document.getElementById('kuch-wynik').classList.remove('hidden');
            });

            // --- INNE ---
            const footerYear = document.getElementById('footer-year');
            if (footerYear) {
                footerYear.textContent = new Date().getFullYear();
            }
        });
    </script>
</body>
</html>
